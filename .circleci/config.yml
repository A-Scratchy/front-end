version: 2.1

orbs:
  cypress: cypress-io/cypress@1.16.1

executors:
  default:
    docker:
      - image: cypress/base:12.16.1 # keep in sync with .nvmrc and any other executors
    environment:
      CC_TEST_REPORTER_ID: 0f2bc6ef737019bfc8eda369cd06b66c54606b144b4d81cec010fb494d2559af

parameters:
  workspace_root:
    type: string
    default: '~/'
  cache_key:
    type: string
    default: 'dependencies-2-{{ checksum "yarn.lock" }}'

aliases:
  - &restore_cache
    keys:
      - << pipeline.parameters.cache_key >>

jobs:
  install_dependencies:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_root >>
      - restore_cache: *restore_cache
      - run:
          name: Install dependencies
          command: yarn install --non-interactive --frozen-lockfile --production=false --cache-folder << pipeline.parameters.workspace_root >>.cache/yarn
      - save_cache:
          key: << pipeline.parameters.cache_key >>
          paths:
            - node_modules
            - << pipeline.parameters.workspace_root >>.cache
            - << pipeline.parameters.workspace_root >>.cache/yarn
            - << pipeline.parameters.workspace_root >>.cache/Cypress

  unit_tests:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_root >>
      - restore_cache: *restore_cache
      - run:
          name: Run tests
          command: |
            yarn test:ci --silent=false
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - project/jest-coverage


  lint:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_root >>
      - restore_cache: *restore_cache
      - run:
          name: Lint
          command: |
            yarn lint:ci

workflows:
  default:
    jobs:
      - install_dependencies

      - unit_tests:
          requires:
            - install_dependencies

      - lint:
          requires:
            - install_dependencies

      - cypress/install:
          name: cypress_install
          executor: default
          requires:
            - install_dependencies
          yarn: true
          cache-key: << pipeline.parameters.cache_key >>

      - cypress/run:
          name: integration_tests
          executor: default
          requires:
            - cypress_install
            - unit_tests
          record: true # record results on Cypress Dashboard
          parallel: true # split all specs across machines
          parallelism: 3 # use 3 CircleCI machines
          group: 'all tests' # name this group "all tests" on the dashboard
          start: 'yarn dev' # start server before running tests
          wait-on: http://localhost:3000 # wait until server is ready
          post-steps:
            - run:
                name: Get each parallelized node's coverage report
                command: |
                  cp cypress-coverage/coverage-final.json "cypress-coverage/coverage.node-$CIRCLE_NODE_INDEX.json"
            - run:
                name: Initialize CodeClimate
                command: |
                  curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc_test_reporter
                  chmod +x ./cc_test_reporter
            - run:
                name: Merge reports into one file
                command: |
                  rm -rf .nyc_output
                  ls -al cypress-coverage
                  mkdir reports
                  mkdir .nyc_output
                  cp cypress-coverage/*.json reports
                  cp jest-coverage/coverage-final.json reports/from-jest.json
                  ls -al reports
                  ls -al .nyc_output
                  yarn nyc merge reports
                  mv coverage.json .nyc_output/out.json
            - run:
                name: Convert finalized report from JSON to lcov
                command: |
                  yarn nyc report --reporter lcov --report-dir coverage
            - run:
                name: Format report for Code Climate
                command: |
                  ./cc_test_reporter format-coverage -t lcov -o coverage/codeclimate.json coverage/lcov.info
            - run:
                name: Upload the report to CodeClimate
                command: |
                  ./cc_test_reporter upload-coverage --debug --input coverage/codeclimate.json
